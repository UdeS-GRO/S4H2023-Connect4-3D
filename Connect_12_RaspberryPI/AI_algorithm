from GameBoardRepresentation import gameboard

class AI:

    gm = gameboard()
    possible_plays = []
    AI_token = "X"

    #def __init__(self):
        
    def get_plays(self):
        for i in range(self.gm.row_total-1):
            for j in range(self.gm.column_total-1):
                for k in range(self.gm.column_total-1):
                    if self.gm.board[i][j][k] == 0:  
                        self.possible_plays.append([i+1,j+1,k+1])
                        break

    def rate_play(self,play):
        strength = 0

        return strength
        
    """def detect_lines(self,play):
        row_index = play[0]-1
        column_index = play[0]-1
        floor_index = play[0]-1

        #Row lines
        streak = 0
        for i in range(0,self.row_total-1):
            if self.gm.board[i][column_index][floor_index]==self.gm.board[row_index][column_index][floor_index]:
                streak = streak +1

            elif self.gm.board[i][column_index][floor_index] != 0:
                streak = 0"""

    def detect_win(self,play):
        row_index = play[0]-1
        column_index = play[0]-1
        floor_index = play[0]-1

        #Row verification
        streak = 0
        for i in range(0,self.row_total-1):
            if self.gm.board[i][column_index][floor_index]==self.gm.board[row_index][column_index][floor_index]:
                streak = streak + 1
            else:
                streak = 0
        if streak == 4:
            return True
        #Column verification
        streak = 0
        for j in range(0,self.column_total-1):
            if self.gm.board[row_index][j][floor_index]==self.gm.board[row_index][column_index][floor_index]:
                streak = streak + 1
            else:
                streak = 0
        if streak == 4:
            return True
        #Positive diagonal column and row verification
        streak = 0
        for i in range(0,self.column_total-1):
            if row_index+i > self.row_total-1 or column_index+i > self.row_total-1:
                break
            if self.gm.board[row_index+i][row_index+i][floor_index]==self.gm.board[row_index][column_index][floor_index]:
                streak = streak + 1
            else:
                streak = 0
        if streak == 4:
            return True
        #Negative diagonal column and row verification
        streak = 0
        for j in range(0,self.column_total-1):
            if row_index+j > self.row_total-1 or column_index+j > self.row_total-1:
                break
            if self.gm.board[row_index-j][row_index+j][floor_index]==self.gm.board[row_index][column_index][floor_index]:
                streak = streak + 1
            else:
                streak = 0
        if streak == 4:
            return True
        





    #def choose_play(self):

if __name__=="__main__":

    AI = AI()
    AI.get_plays()
    #print(AI.gm.board)
    print(AI.possible_plays)
